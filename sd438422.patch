diff -rupNEZbB OriginalSources/usr/src/include/unistd.h Sources/usr/src/include/unistd.h
--- OriginalSources/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/include/unistd.h	2023-05-29 15:30:48.807621909 +0200
@@ -69,6 +69,7 @@
 #include <sys/featuretest.h>
 #include <sys/types.h>
 #include <sys/unistd.h>
+#include <stdbool.h>
 
 #if _FORTIFY_SOURCE > 0
 #include <ssp/unistd.h>
@@ -411,5 +412,7 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int sched_deadline(int64_t deadline, int64_t estimate, bool kill);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB OriginalSources/usr/src/lib/libc/misc/Makefile.inc Sources/usr/src/lib/libc/misc/Makefile.inc
--- OriginalSources/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/lib/libc/misc/Makefile.inc	2023-05-29 14:52:43.877621245 +0200
@@ -8,3 +8,4 @@ SRCS+=	initfini.c
 
 # for -fstack-protector
 SRCS+=	stack_protector.c
+SRCS+=  sched_deadline.c
\ No newline at end of file
diff -rupNEZbB OriginalSources/usr/src/lib/libc/misc/sched_deadline.c Sources/usr/src/lib/libc/misc/sched_deadline.c
--- OriginalSources/usr/src/lib/libc/misc/sched_deadline.c	1970-01-01 01:00:00.000000000 +0100
+++ Sources/usr/src/lib/libc/misc/sched_deadline.c	2023-06-04 13:31:08.034063457 +0200
@@ -0,0 +1,13 @@
+#include <lib.h>
+#include <unistd.h>
+#include <stdbool.h>
+
+int sched_deadline(int64_t deadline, int64_t estimate, bool kill) {
+    message m;
+    m.m_sched_deadline.deadline = deadline;
+    m.m_sched_deadline.estimate = estimate;
+    m.m_sched_deadline.kill = kill;
+
+    errno = 0;
+    return _syscall(PM_PROC_NR, PM_SCHED_DEADLINE, &m);
+}
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/callnr.h Sources/usr/src/minix/include/minix/callnr.h
--- OriginalSources/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/callnr.h	2023-05-29 14:48:47.647621620 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_SCHED_DEADLINE         (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/com.h Sources/usr/src/minix/include/minix/com.h
--- OriginalSources/usr/src/minix/include/minix/com.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/com.h	2023-06-02 17:13:41.340116301 +0200
@@ -763,6 +763,7 @@
 #define SCHEDULING_STOP		(SCHEDULING_BASE+3)
 #define SCHEDULING_SET_NICE	(SCHEDULING_BASE+4)
 #define SCHEDULING_INHERIT	(SCHEDULING_BASE+5)
+#define SCHEDULING_SET_DEADLINE (SCHEDULING_BASE+6)
 
 /*===========================================================================*
  *              Messages for USB                                             *
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/config.h Sources/usr/src/minix/include/minix/config.h
--- OriginalSources/usr/src/minix/include/minix/config.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/config.h	2023-05-29 14:34:13.797621348 +0200
@@ -66,6 +66,8 @@
 						(should correspond to nice 0) */
 #define MIN_USER_Q	  (NR_SCHED_QUEUES - 1)	/* minimum priority for user
 						   processes */
+#define DEADLINE_Q 8   /* deadline queue */
+#define PENALTY_Q 14   /* penalty queue */
 /* default scheduling quanta */
 #define USER_QUANTUM 200
 
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/ipc.h Sources/usr/src/minix/include/minix/ipc.h
--- OriginalSources/usr/src/minix/include/minix/ipc.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/ipc.h	2023-06-02 21:16:24.676497736 +0200
@@ -6,6 +6,7 @@
 #include <minix/const.h>
 #include <sys/signal.h>
 #include <sys/types.h>
+#include <stdbool.h>
 
 /*==========================================================================* 
  * Types relating to messages. 						    *
@@ -988,8 +989,11 @@ typedef struct {
 	int quantum;
 	int priority;
 	int cpu;
+    int64_t deadline;
+    int64_t estimate;
+    bool kill;
 
-	uint8_t padding[40];
+	uint8_t padding[23];
 } mess_lsys_krn_schedule;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedule);
 
@@ -2024,6 +2028,16 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_vmmcp_reply);
 
 typedef struct {
+    int64_t deadline;
+    int64_t estimate;
+    endpoint_t endpoint;
+    bool kill;
+
+    uint8_t padding[35];
+} mess_sched_deadline;
+_ASSERT_MSG_SIZE(mess_sched_deadline);
+
+typedef struct {
 	endpoint_t m_source;		/* who sent the message */
 	int m_type;			/* what kind of message is it */
 	union {
@@ -2251,6 +2265,7 @@ typedef struct {
 		mess_vm_vfs_mmap	m_vm_vfs_mmap;
 		mess_vmmcp		m_vmmcp;
 		mess_vmmcp_reply	m_vmmcp_reply;
+        mess_sched_deadline m_sched_deadline;
 
 		u8_t size[56];	/* message payload may have 56 bytes at most */
 	};
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/syslib.h Sources/usr/src/minix/include/minix/syslib.h
--- OriginalSources/usr/src/minix/include/minix/syslib.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/syslib.h	2023-06-03 15:40:56.075429245 +0200
@@ -13,6 +13,7 @@
 #include <minix/safecopies.h>
 #include <minix/sef.h>
 #include <machine/mcontext.h>
+#include <stdbool.h>
 
 /* Forward declaration */
 struct reg86u;
@@ -38,7 +39,7 @@ int sys_exit(void);
 int sys_trace(int req, endpoint_t proc_ep, long addr, long *data_p);
 
 int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int
-	cpu);
+	cpu, int64_t deadline, int64_t estimate, bool kill);
 int sys_schedctl(unsigned flags, endpoint_t proc_ep, int priority, int
 	quantum, int cpu);
 
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/proc.c Sources/usr/src/minix/kernel/proc.c
--- OriginalSources/usr/src/minix/kernel/proc.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/kernel/proc.c	2023-06-04 16:19:04.664062761 +0200
@@ -35,6 +35,7 @@
 #include <signal.h>
 #include <assert.h>
 #include <string.h>
+#include <stdbool.h>
 
 #include "kernel/kernel.h"
 #include "vm.h"
@@ -134,6 +135,9 @@ void proc_init(void)
 		rp->p_scheduler = NULL;		/* no user space scheduler */
 		rp->p_priority = 0;		/* no priority */
 		rp->p_quantum_size_ms = 0;	/* no quantum size */
+        rp->p_deadline = -1;
+        rp->p_estimate = 0;
+        rp->p_kill = false;
 
 		/* arch-specific initialization */
 		arch_proc_reset(rp);
@@ -1551,9 +1555,151 @@ void enqueue(
       rp->p_nextready = NULL;		/* mark new end */
   } 
   else {					/* add to tail of queue */
+      if (q != DEADLINE_Q) {
       rdy_tail[q]->p_nextready = rp;		/* chain tail of queue */	
       rdy_tail[q] = rp;				/* set new queue tail */
       rp->p_nextready = NULL;		/* mark new end */
+      } else {
+          int64_t now = (int64_t) boottime * 1000;
+          now += (int64_t) get_monotonic() * 1000 / system_hz;
+
+          struct proc *p = rdy_head[q];
+          int64_t sum_pref = now;
+          int64_t k = 0;
+
+          while (p) {
+              sum_pref += p->p_estimate;
+              if (sum_pref <= rp->p_deadline) {
+                  k += 1;
+              }
+              p = p->p_nextready;
+          }
+
+          int64_t i = 0;
+          int64_t last_pos = -1;
+          p = rdy_head[q];
+
+          while (p) {
+              int64_t sum_pref_tmp = now;
+              int64_t j = 0;
+              int64_t k_tmp = 0;
+              struct proc *it = rdy_head[q];
+
+              while (it) {
+                  if (j == i) {
+                      sum_pref_tmp += rp->p_estimate;
+                      if (sum_pref_tmp <= rp->p_deadline) {
+                          k_tmp += 1;
+                      }
+                  } else {
+                      sum_pref_tmp += it->p_estimate;
+                      if (sum_pref_tmp <= it->p_deadline) {
+                          k_tmp += 1;
+                      }
+                      it = it->p_nextready;
+                  }
+                  j += 1;
+              }
+
+              if (k_tmp == k + 1) {
+                  last_pos = i;
+              }
+
+              i += 1;
+              p = p->p_nextready;
+          }
+
+          if (k == i && sum_pref + rp->p_estimate <= rp->p_deadline) {
+              last_pos = i;
+          }
+
+          if (last_pos != -1) {
+              if (last_pos == 0) {
+                  rp->p_nextready = rdy_head[q];
+                  rdy_head[q] = rp;
+              } else if (last_pos != i) {
+                  int64_t j = 0;
+                  struct proc *it = rdy_head[q];
+
+                  while (j < last_pos - 1) {
+                      it = it->p_nextready;
+                      j += 1;
+                  }
+
+                  rp->p_nextready = it->p_nextready;
+                  it->p_nextready = rp;
+              } else {
+                  rdy_tail[q]->p_nextready = rp;
+                  rdy_tail[q] = rp;
+                  rp->p_nextready = NULL;
+              }
+          } else {
+              i = 0;
+              last_pos = -1;
+              p = rdy_head[q];
+
+              while (p) {
+                  int64_t sum_pref_tmp = now;
+                  int64_t j = 0;
+                  int64_t k_tmp = 0;
+                  struct proc *it = rdy_head[q];
+                  struct proc *prev = NULL;
+
+                  while (it) {
+                      if (j == i) {
+                          sum_pref_tmp += rp->p_estimate;
+                          if (sum_pref_tmp <= rp->p_deadline) {
+                              k_tmp += 1;
+                          }
+                      } else {
+                          sum_pref_tmp += it->p_estimate;
+                          if (sum_pref_tmp <= it->p_deadline) {
+                              k_tmp += 1;
+                          }
+                          it = it->p_nextready;
+                      }
+                      j += 1;
+                  }
+
+                  if (prev) {
+                      if (k_tmp == k && prev->p_estimate <= rp->p_estimate &&
+                          p->p_estimate >= rp->p_estimate) {
+                          last_pos = i;
+                      }
+                  }
+
+                  i += 1;
+                  prev = p;
+                  p = p->p_nextready;
+              }
+
+              if (last_pos != -1) {
+                  if (last_pos == 0) {
+                      rp->p_nextready = rdy_head[q];
+                      rdy_head[q] = rp;
+                  } else if (last_pos != i) {
+                      int64_t j = 0;
+                      struct proc *it = rdy_head[q];
+
+                      while (j < last_pos - 1) {
+                          it = it->p_nextready;
+                          j += 1;
+                      }
+
+                      rp->p_nextready = it->p_nextready;
+                      it->p_nextready = rp;
+                  } else {
+                      rdy_tail[q]->p_nextready = rp;
+                      rdy_tail[q] = rp;
+                      rp->p_nextready = NULL;
+                  }
+              } else {
+                  rdy_tail[q]->p_nextready = rp;
+                  rdy_tail[q] = rp;
+                  rp->p_nextready = NULL;
+              }
+          }
+      }
   }
 
   if (cpuid == rp->p_cpu) {
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/proc.h Sources/usr/src/minix/kernel/proc.h
--- OriginalSources/usr/src/minix/kernel/proc.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/kernel/proc.h	2023-06-02 21:53:18.916437865 +0200
@@ -3,6 +3,7 @@
 
 #include <minix/const.h>
 #include <sys/cdefs.h>
+#include <stdbool.h>
 
 #ifndef __ASSEMBLY__
 
@@ -131,6 +132,10 @@ struct proc {
 #if DEBUG_TRACE
   int p_schedules;
 #endif
+
+  int64_t p_deadline;
+  int64_t p_estimate;
+  bool p_kill;
 };
 
 #endif /* __ASSEMBLY__ */
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/proto.h Sources/usr/src/minix/kernel/proto.h
--- OriginalSources/usr/src/minix/kernel/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/kernel/proto.h	2023-06-02 21:16:24.566497737 +0200
@@ -10,6 +10,7 @@
 #include <machine/archtypes.h>
 #include <machine/signal.h>
 #include <machine/frame.h>
+#include <stdbool.h>
 
 /* Struct declarations. */
 struct proc;
@@ -99,7 +100,8 @@ void system_init(void);
 void clear_endpoint(struct proc *rc);
 void clear_ipc_refs(struct proc *rc, int caller_ret);
 void kernel_call_resume(struct proc *p);
-int sched_proc(struct proc *rp, int priority, int quantum, int cpu);
+int sched_proc(struct proc *rp, int priority, int quantum, int cpu,
+               int64_t deadline, int64_t estimate, bool kill);
 
 /* system/do_vtimer.c */
 void vtimer_check(struct proc *rp);
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/system/do_schedctl.c Sources/usr/src/minix/kernel/system/do_schedctl.c
--- OriginalSources/usr/src/minix/kernel/system/do_schedctl.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/kernel/system/do_schedctl.c	2023-06-02 21:27:42.266497263 +0200
@@ -1,5 +1,6 @@
 #include "kernel/system.h"
 #include <minix/endpoint.h>
+#include <stdbool.h>
 
 /*===========================================================================*
  *			          do_schedctl			     *
@@ -34,7 +35,7 @@ int do_schedctl(struct proc * caller, me
 		cpu = m_ptr->m_lsys_krn_schedctl.cpu;
 
 		/* Try to schedule the process. */
-		if((r = sched_proc(p, priority, quantum, cpu) != OK))
+		if((r = sched_proc(p, priority, quantum, cpu, -2, 0, false) != OK))
 			return r;
 		p->p_scheduler = NULL;
 	} else {
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/system/do_schedule.c Sources/usr/src/minix/kernel/system/do_schedule.c
--- OriginalSources/usr/src/minix/kernel/system/do_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/kernel/system/do_schedule.c	2023-06-03 12:43:51.500357296 +0200
@@ -1,6 +1,7 @@
 #include "kernel/system.h"
 #include <minix/endpoint.h>
 #include "kernel/clock.h"
+#include <stdbool.h>
 
 /*===========================================================================*
  *				do_schedule				     *
@@ -10,6 +11,8 @@ int do_schedule(struct proc * caller, me
 	struct proc *p;
 	int proc_nr;
 	int priority, quantum, cpu;
+    int64_t deadline, estimate;
+    bool kill;
 
 	if (!isokendpt(m_ptr->m_lsys_krn_schedule.endpoint, &proc_nr))
 		return EINVAL;
@@ -24,6 +27,9 @@ int do_schedule(struct proc * caller, me
 	priority = m_ptr->m_lsys_krn_schedule.priority;
 	quantum = m_ptr->m_lsys_krn_schedule.quantum;
 	cpu = m_ptr->m_lsys_krn_schedule.cpu;
+    deadline = m_ptr->m_lsys_krn_schedule.deadline;
+    estimate = m_ptr->m_lsys_krn_schedule.estimate;
+    kill = m_ptr->m_lsys_krn_schedule.kill;
 
-	return sched_proc(p, priority, quantum, cpu);
+	return sched_proc(p, priority, quantum, cpu, deadline, estimate, kill);
 }
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/system.c Sources/usr/src/minix/kernel/system.c
--- OriginalSources/usr/src/minix/kernel/system.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/kernel/system.c	2023-06-02 21:41:01.896438700 +0200
@@ -42,6 +42,7 @@
 #include <unistd.h>
 #include <minix/endpoint.h>
 #include <minix/safecopies.h>
+#include <stdbool.h>
 
 /* Declaration of the call vector that defines the mapping of system calls 
  * to handler functions. The vector is initialized in sys_init() with map(), 
@@ -621,7 +622,10 @@ void kernel_call_resume(struct proc *cal
 int sched_proc(struct proc *p,
 			int priority,
 			int quantum,
-			int cpu)
+			int cpu,
+            int64_t deadline,
+            int64_t estimate,
+            bool kill)
 {
 	/* Make sure the values given are within the allowed range.*/
 	if ((priority < TASK_Q && priority != -1) || priority > NR_SCHED_QUEUES)
@@ -665,6 +669,11 @@ int sched_proc(struct proc *p,
 		p->p_quantum_size_ms = quantum;
 		p->p_cpu_time_left = ms_2_cpu_time(quantum);
 	}
+    if (deadline != -2) {
+        p->p_deadline = deadline;
+        p->p_estimate = estimate;
+        p->p_kill = kill;
+    }
 #ifdef CONFIG_SMP
 	if (cpu != -1)
 		p->p_cpu = cpu;
diff -rupNEZbB OriginalSources/usr/src/minix/lib/libsys/sys_schedule.c Sources/usr/src/minix/lib/libsys/sys_schedule.c
--- OriginalSources/usr/src/minix/lib/libsys/sys_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/lib/libsys/sys_schedule.c	2023-06-03 12:43:51.390357296 +0200
@@ -1,9 +1,13 @@
 #include "syslib.h"
+#include <stdbool.h>
 
 int sys_schedule(endpoint_t proc_ep,
 			int priority,
 			int quantum,
-			int cpu)
+			int cpu,
+            int64_t deadline,
+            int64_t estimate,
+            bool kill)
 {
 	message m;
 
@@ -11,5 +15,8 @@ int sys_schedule(endpoint_t proc_ep,
 	m.m_lsys_krn_schedule.priority = priority;
 	m.m_lsys_krn_schedule.quantum  = quantum;
 	m.m_lsys_krn_schedule.cpu = cpu;
+    m.m_lsys_krn_schedule.deadline = deadline;
+    m.m_lsys_krn_schedule.estimate = estimate;
+    m.m_lsys_krn_schedule.kill = kill;
 	return(_kernel_call(SYS_SCHEDULE, &m));
 }
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/Makefile Sources/usr/src/minix/servers/pm/Makefile
--- OriginalSources/usr/src/minix/servers/pm/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/Makefile	2023-05-29 14:59:12.637621706 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c sched_deadline.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/proto.h Sources/usr/src/minix/servers/pm/proto.h
--- OriginalSources/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/proto.h	2023-05-29 14:57:32.577620905 +0200
@@ -89,3 +89,5 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+int do_sched_deadline(void);
\ No newline at end of file
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/sched_deadline.c Sources/usr/src/minix/servers/pm/sched_deadline.c
--- OriginalSources/usr/src/minix/servers/pm/sched_deadline.c	1970-01-01 01:00:00.000000000 +0100
+++ Sources/usr/src/minix/servers/pm/sched_deadline.c	2023-06-04 13:31:08.074063457 +0200
@@ -0,0 +1,14 @@
+#include "pm.h"
+#include "mproc.h"
+#include <lib.h>
+
+int do_sched_deadline(void) {
+    message m;
+
+    m.m_sched_deadline.endpoint = mp->mp_endpoint;
+    m.m_sched_deadline.deadline = m_in.m_sched_deadline.deadline;
+    m.m_sched_deadline.estimate = m_in.m_sched_deadline.estimate;
+    m.m_sched_deadline.kill = m_in.m_sched_deadline.kill;
+
+    return _taskcall(mp->mp_scheduler, SCHEDULING_SET_DEADLINE, &m);
+}
\ No newline at end of file
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/table.c Sources/usr/src/minix/servers/pm/table.c
--- OriginalSources/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/table.c	2023-05-29 14:58:14.647621440 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+    CALL(PM_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+    CALL(PM_SCHED_DEADLINE) = do_sched_deadline
 };
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/main.c Sources/usr/src/minix/servers/sched/main.c
--- OriginalSources/usr/src/minix/servers/sched/main.c	2023-06-03 18:05:33.405425130 +0200
+++ Sources/usr/src/minix/servers/sched/main.c	2023-06-04 13:30:27.824063334 +0200
@@ -87,6 +87,9 @@ int main(void)
 				result = EPERM;
 			}
 			break;
+        case SCHEDULING_SET_DEADLINE:
+            result = do_deadline(&m_in);
+            break;
 		default:
 			result = no_sys(who_e, call_nr);
 		}
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/proto.h Sources/usr/src/minix/servers/sched/proto.h
--- OriginalSources/usr/src/minix/servers/sched/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/sched/proto.h	2023-06-02 19:48:10.536499025 +0200
@@ -12,6 +12,7 @@ int do_noquantum(message *m_ptr);
 int do_start_scheduling(message *m_ptr);
 int do_stop_scheduling(message *m_ptr);
 int do_nice(message *m_ptr);
+int do_deadline(message *m_ptr);
 void init_scheduling(void);
 
 /* utility.c */
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/schedproc.h Sources/usr/src/minix/servers/sched/schedproc.h
--- OriginalSources/usr/src/minix/servers/sched/schedproc.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/sched/schedproc.h	2023-06-02 21:53:18.866437866 +0200
@@ -4,6 +4,7 @@
 #include <limits.h>
 
 #include <minix/bitmap.h>
+#include <stdbool.h>
 
 /* EXTERN should be extern except in main.c, where we want to keep the struct */
 #ifdef _MAIN
@@ -33,6 +34,11 @@ EXTERN struct schedproc {
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 								process allowed
 								to run on */
+
+    int64_t deadline;
+    int64_t estimate;
+    bool kill;
+    unsigned old_priority;
 } schedproc[NR_PROCS];
 
 /* Flag values */
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/schedule.c Sources/usr/src/minix/servers/sched/schedule.c
--- OriginalSources/usr/src/minix/servers/sched/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/sched/schedule.c	2023-06-04 19:52:27.097425978 +0200
@@ -12,6 +12,8 @@
 #include <assert.h>
 #include <minix/com.h>
 #include <machine/archtypes.h>
+#include <stdbool.h>
+#include <sys/time.h>
 #include "kernel/proc.h" /* for queue constants */
 
 static minix_timer_t sched_timer;
@@ -21,22 +23,27 @@ static unsigned balance_timeout;
 
 static int schedule_process(struct schedproc * rmp, unsigned flags);
 static void balance_queues(minix_timer_t *tp);
+static inline unsigned avoid_d_q(unsigned p);
+static inline int64_t get_now(void);
 
 #define SCHEDULE_CHANGE_PRIO	0x1
 #define SCHEDULE_CHANGE_QUANTUM	0x2
 #define SCHEDULE_CHANGE_CPU	0x4
+#define SCHEDULE_CHANGE_DEADLINE	0x8
 
 #define SCHEDULE_CHANGE_ALL	(	\
 		SCHEDULE_CHANGE_PRIO	|	\
 		SCHEDULE_CHANGE_QUANTUM	|	\
-		SCHEDULE_CHANGE_CPU		\
+		SCHEDULE_CHANGE_CPU		|      \
+		SCHEDULE_CHANGE_DEADLINE		\
 		)
 
 #define schedule_process_local(p)	\
 	schedule_process(p, SCHEDULE_CHANGE_PRIO | SCHEDULE_CHANGE_QUANTUM)
 #define schedule_process_migrate(p)	\
 	schedule_process(p, SCHEDULE_CHANGE_CPU)
-
+#define schedule_process_deadline(p) \
+    schedule_process(p, SCHEDULE_CHANGE_PRIO | SCHEDULE_CHANGE_DEADLINE | SCHEDULE_CHANGE_QUANTUM)
 #define CPU_DEAD	-1
 
 #define cpu_is_available(c)	(cpu_proc[c] >= 0)
@@ -99,11 +106,33 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	if (rmp->priority < MIN_USER_Q) {
-		rmp->priority += 1; /* lower priority */
+    if (rmp->priority < MIN_USER_Q && rmp->deadline == -1) {
+        if (rmp->priority + 1 == DEADLINE_Q) {
+            rmp->priority += 2;
+            if (rmp->priority > MIN_USER_Q) {
+                rmp->priority -= 2;
+            }
+        } else {
+            rmp->priority += 1;
 	}
+    } else if (rmp->deadline != -1) {
+        int64_t now = get_now();
+        rmp->estimate -= rmp->time_slice;
 
-	if ((rv = schedule_process_local(rmp)) != OK) {
+        if (rmp->estimate <= 0) {
+            if (rmp->kill) {
+                return sys_kill(rmp->endpoint, SIGKILL);
+            } else {
+                rmp->deadline = -1;
+                rmp->priority = PENALTY_Q;
+            }
+        } else if (rmp->deadline < now) {
+            rmp->deadline = -1;
+            rmp->priority = rmp->old_priority;
+        }
+    }
+
+	if ((rv = schedule_process_deadline(rmp)) != OK) {
 		return rv;
 	}
 	return OK;
@@ -133,6 +162,7 @@ int do_stop_scheduling(message *m_ptr)
 	cpu_proc[rmp->cpu]--;
 #endif
 	rmp->flags = 0; /*&= ~IN_USE;*/
+    rmp->deadline = -1;
 
 	return OK;
 }
@@ -195,8 +225,9 @@ int do_start_scheduling(message *m_ptr)
 		/* We have a special case here for system processes, for which
 		 * quanum and priority are set explicitly rather than inherited 
 		 * from the parent */
-		rmp->priority   = rmp->max_priority;
+		rmp->priority   = avoid_d_q(rmp->max_priority);
 		rmp->time_slice = m_ptr->m_lsys_sched_scheduling_start.quantum;
+        rmp->deadline = -1;
 		break;
 		
 	case SCHEDULING_INHERIT:
@@ -209,6 +240,10 @@ int do_start_scheduling(message *m_ptr)
 
 		rmp->priority = schedproc[parent_nr_n].priority;
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
+        rmp->deadline = schedproc[parent_nr_n].deadline;
+        rmp->estimate = schedproc[parent_nr_n].estimate;
+        rmp->old_priority = schedproc[parent_nr_n].old_priority;
+        rmp->kill = schedproc[parent_nr_n].kill;
 		break;
 		
 	default: 
@@ -276,6 +311,7 @@ int do_nice(message *m_ptr)
 	if (new_q >= NR_SCHED_QUEUES) {
 		return EINVAL;
 	}
+    new_q = avoid_d_q(new_q);
 
 	/* Store old values, in case we need to roll back the changes */
 	old_q     = rmp->priority;
@@ -295,12 +331,76 @@ int do_nice(message *m_ptr)
 }
 
 /*===========================================================================*
+ *				do_deadline				     *
+ *===========================================================================*/
+int do_deadline(message *m_ptr) {
+    register struct schedproc *rmp;
+    int rv;
+    int proc_nr_n;
+    unsigned old_q, old_old_priority;
+    int64_t deadline, estimate, old_deadline, old_estimate;
+    bool kill, old_kill;
+
+    /* check who can send you requests */
+    if (!accept_message(m_ptr))
+        return EPERM;
+
+    if (sched_isokendpt(m_ptr->m_sched_deadline.endpoint, &proc_nr_n) != OK) {
+        printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
+               "%d\n", m_ptr->m_sched_deadline.endpoint);
+        return EBADEPT;
+    }
+
+    rmp = &schedproc[proc_nr_n];
+    deadline = m_ptr->m_sched_deadline.deadline;
+    estimate = m_ptr->m_sched_deadline.estimate;
+    kill = m_ptr->m_sched_deadline.kill;
+
+    int64_t now = get_now();
+
+    if ((deadline < now + estimate && deadline != -1) || estimate <= 0) {
+        return EINVAL;
+    }
+
+    if ((rmp->deadline == -1 && deadline == -1) || (rmp->deadline != -1 && deadline != -1)) {
+        return EPERM;
+    }
+
+    old_q = rmp->priority;
+    old_deadline = rmp->deadline;
+    old_estimate = rmp->estimate;
+    old_kill = rmp->kill;
+    old_old_priority = rmp->old_priority;
+
+    if (deadline != -1) {
+        rmp->old_priority = old_q;
+    }
+
+    rmp->deadline = deadline;
+    rmp->estimate = estimate;
+    rmp->kill = kill;
+    rmp->priority = deadline == -1 ? rmp->old_priority : DEADLINE_Q;
+
+    if ((rv = schedule_process_deadline(rmp)) != OK) {
+        rmp->priority = old_q;
+        rmp->deadline = old_deadline;
+        rmp->estimate = old_estimate;
+        rmp->kill = old_kill;
+        rmp->old_priority = old_old_priority;
+    }
+
+    return rv;
+}
+
+/*===========================================================================*
  *				schedule_process			     *
  *===========================================================================*/
 static int schedule_process(struct schedproc * rmp, unsigned flags)
 {
 	int err;
 	int new_prio, new_quantum, new_cpu;
+    int64_t new_deadline, new_estimate;
+    bool new_kill;
 
 	pick_cpu(rmp);
 
@@ -319,8 +419,18 @@ static int schedule_process(struct sched
 	else
 		new_cpu = -1;
 
+    if (flags & SCHEDULE_CHANGE_DEADLINE) {
+        new_deadline = rmp->deadline;
+        new_estimate = rmp->estimate;
+        new_kill = rmp->kill;
+    } else {
+        new_deadline = -2;
+        new_estimate = 0;
+        new_kill = false;
+    }
+
 	if ((err = sys_schedule(rmp->endpoint, new_prio,
-		new_quantum, new_cpu)) != OK) {
+		new_quantum, new_cpu, new_deadline, new_estimate, new_kill)) != OK) {
 		printf("PM: An error occurred when trying to schedule %d: %d\n",
 		rmp->endpoint, err);
 	}
@@ -355,9 +465,16 @@ static void balance_queues(minix_timer_t
 	int proc_nr;
 
 	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
-		if (rmp->flags & IN_USE) {
+        if (rmp->flags & IN_USE && rmp->deadline == -1) {
 			if (rmp->priority > rmp->max_priority) {
-				rmp->priority -= 1; /* increase priority */
+                if (rmp->priority - 1 == DEADLINE_Q) {
+                    rmp->priority -= 2;
+                    if (rmp->priority < rmp->max_priority) {
+                        rmp->priority += 2;
+                    }
+                } else {
+                    rmp->priority -= 1;
+                }
 				schedule_process_local(rmp);
 			}
 		}
@@ -365,3 +482,31 @@ static void balance_queues(minix_timer_t
 
 	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
 }
+
+/*===========================================================================*
+ *				avoid_d_q				     *
+ *===========================================================================*/
+static inline unsigned avoid_d_q(unsigned p) {
+    if (p == DEADLINE_Q) {
+        if (p < MIN_USER_Q) {
+            return p + 1;
+        } else {
+            return p - 1;
+        }
+    }
+
+    return p;
+}
+
+/*===========================================================================*
+ *				get_now			     *
+ *===========================================================================*/
+static inline int64_t get_now(void) {
+    clock_t ticks;
+    clock_t realtime;
+    time_t boottime;
+    getuptime(&ticks, &realtime, &boottime);
+    int64_t now = (int64_t) boottime * 1000;
+    now += (int64_t) ticks * 1000 / sys_hz();
+    return now;
+}
